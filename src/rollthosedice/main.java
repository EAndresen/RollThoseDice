/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rollthosedice;

import java.awt.FlowLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author erica
 */
public class main extends javax.swing.JFrame {

    //Instansvariabler
    int numberOfPlayers;
    int numberOfDice;
    int player1Score, player2Score, player3Score, player4Score, player5Score, player6Score;
    int winningNumber;

    ArrayList playerHighscore = new ArrayList();

    String ut;
    String winnerOutput = "";

    IO highScore;

    //Skapar en array med labels för varje spelare.
    JLabel player1[] = new JLabel[6];
    JLabel player2[] = new JLabel[6];
    JLabel player3[] = new JLabel[6];
    JLabel player4[] = new JLabel[6];
    JLabel player5[] = new JLabel[6];
    JLabel player6[] = new JLabel[6];

    /**
     * Creates new form main
     */
    public main() throws IOException {
        initComponents();
        //Plcerar spelplanen i mitten av skärmen
        setLocationRelativeTo(null);
        //Gör så att man inte kan ändra rutans storlek
        setResizable(false);

        this.highScore = new IO();

        //Placerar object i varje spelares array
        for (int n = 0; n < 6; n++) {
            player1[n] = new JLabel();
        }
        for (int n = 0; n < 6; n++) {
            player2[n] = new JLabel();
        }
        for (int n = 0; n < 6; n++) {
            player3[n] = new JLabel();
        }
        for (int n = 0; n < 6; n++) {
            player4[n] = new JLabel();
        }
        for (int n = 0; n < 6; n++) {
            player5[n] = new JLabel();
        }
        for (int n = 0; n < 6; n++) {
            player6[n] = new JLabel();
        }
        //Ritar ut fin animerad tärning på spelplanen
        animatedDice.setIcon(new ImageIcon("animated-dice-image.gif"));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        playerNumber = new javax.swing.JComboBox<>();
        diceNumber = new javax.swing.JComboBox<>();
        player1Label = new javax.swing.JLabel();
        player1resoult = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        player4Label = new javax.swing.JLabel();
        player3Label = new javax.swing.JLabel();
        player2Label = new javax.swing.JLabel();
        player5Label = new javax.swing.JLabel();
        player2resoult = new javax.swing.JLabel();
        player4resoult = new javax.swing.JLabel();
        player5resoult = new javax.swing.JLabel();
        player3resoult = new javax.swing.JLabel();
        winnerLabel = new javax.swing.JLabel();
        player6Label = new javax.swing.JLabel();
        player6resoult = new javax.swing.JLabel();
        diceRollBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        highscoreOutput = new javax.swing.JTextArea();
        animatedDice = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("Välj Antal Spelare");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setText("Välj Antal Kast");

        playerNumber.setBackground(new java.awt.Color(204, 204, 204));
        playerNumber.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        playerNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        playerNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerNumberActionPerformed(evt);
            }
        });

        diceNumber.setBackground(new java.awt.Color(204, 204, 204));
        diceNumber.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        diceNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

        player1Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        player1resoult.setBackground(new java.awt.Color(255, 102, 0));
        player1resoult.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        player1resoult.setForeground(new java.awt.Color(255, 102, 0));
        player1resoult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player1resoult.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel4.setText("Rekord:");

        player4Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        player3Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        player2Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        player5Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        player2resoult.setBackground(new java.awt.Color(255, 102, 0));
        player2resoult.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        player2resoult.setForeground(new java.awt.Color(255, 102, 0));
        player2resoult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player2resoult.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        player4resoult.setBackground(new java.awt.Color(255, 102, 0));
        player4resoult.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        player4resoult.setForeground(new java.awt.Color(255, 102, 0));
        player4resoult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player4resoult.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        player5resoult.setBackground(new java.awt.Color(255, 102, 0));
        player5resoult.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        player5resoult.setForeground(new java.awt.Color(255, 102, 0));
        player5resoult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player5resoult.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        player3resoult.setBackground(new java.awt.Color(255, 102, 0));
        player3resoult.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        player3resoult.setForeground(new java.awt.Color(255, 102, 0));
        player3resoult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player3resoult.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        winnerLabel.setBackground(new java.awt.Color(204, 204, 204));
        winnerLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        winnerLabel.setForeground(new java.awt.Color(255, 102, 0));
        winnerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        winnerLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));
        winnerLabel.setOpaque(true);

        player6Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        player6resoult.setBackground(new java.awt.Color(255, 102, 0));
        player6resoult.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        player6resoult.setForeground(new java.awt.Color(255, 102, 0));
        player6resoult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player6resoult.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        diceRollBtn.setBackground(new java.awt.Color(51, 51, 51));
        diceRollBtn.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        diceRollBtn.setForeground(new java.awt.Color(255, 102, 0));
        diceRollBtn.setText("Roll Those Dice");
        diceRollBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));
        diceRollBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diceRollBtnActionPerformed(evt);
            }
        });

        resetBtn.setBackground(new java.awt.Color(51, 51, 51));
        resetBtn.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        resetBtn.setForeground(new java.awt.Color(255, 102, 0));
        resetBtn.setText("Återställ Rekord");
        resetBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        highscoreOutput.setBackground(new java.awt.Color(204, 204, 204));
        highscoreOutput.setColumns(1);
        highscoreOutput.setFont(new java.awt.Font("Dialog", 1, 52)); // NOI18N
        highscoreOutput.setForeground(new java.awt.Color(255, 102, 51));
        highscoreOutput.setRows(5);
        highscoreOutput.setTabSize(1);
        highscoreOutput.setWrapStyleWord(true);
        highscoreOutput.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 51), 1, true));
        jScrollPane1.setViewportView(highscoreOutput);

        animatedDice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(player4resoult, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(player1Label, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                                .addComponent(player2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(player3Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(player1resoult, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                .addComponent(player2resoult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(player3resoult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(winnerLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(player5Label, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                                .addComponent(player4Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(player6Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(player5resoult, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                .addComponent(player6resoult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(playerNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(diceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(animatedDice, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(resetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                    .addComponent(jLabel4)
                    .addComponent(diceRollBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(diceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(diceRollBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(animatedDice, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(player1resoult, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(player2resoult, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(player3resoult, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player4Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(player4resoult, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player5Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(player5resoult, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player6Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(player6resoult, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(resetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                    .addComponent(winnerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Kallar på metod som återställer highscorelistan till 0
    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        String reset = "";
        try {
            reset = highScore.resetHighScore();
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        highscoreOutput.setText(reset);


    }//GEN-LAST:event_resetBtnActionPerformed

    private void diceRollBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diceRollBtnActionPerformed
        numberOfPlayers = playerNumber.getSelectedIndex() + 1;    //Plockar in värdet på antal spelare
        numberOfDice = diceNumber.getSelectedIndex() + 1;        //Plockar inte värdet på antal tärningar

        //Tömmer spelplanen och sedan skapar en ny för varje spelare.
        player1Label.removeAll();
        player1Label.setLayout(new java.awt.FlowLayout(FlowLayout.LEFT, 1, 2));

        player2Label.removeAll();
        player2Label.setLayout(new java.awt.FlowLayout(FlowLayout.LEFT, 1, 2));

        player3Label.removeAll();
        player3Label.setLayout(new java.awt.FlowLayout(FlowLayout.LEFT, 1, 2));

        player4Label.removeAll();
        player4Label.setLayout(new java.awt.FlowLayout(FlowLayout.LEFT, 1, 2));

        player5Label.removeAll();
        player5Label.setLayout(new java.awt.FlowLayout(FlowLayout.LEFT, 1, 2));

        player6Label.removeAll();
        player6Label.setLayout(new java.awt.FlowLayout(FlowLayout.LEFT, 1, 2));

        //Ritar om huvudpanelen för att rensa gamal tärningsslag
        jPanel1.repaint();

        //Tömmer spelarnas tidigare resultat
        player1resoult.setText("");
        player2resoult.setText("");
        player3resoult.setText("");
        player4resoult.setText("");
        player5resoult.setText("");
        player6resoult.setText("");

        //Hämtar ett slumptal 1-6 och placerar sedan ut respektive tärningsbild
        //i form av en icon i spelare 1 layout.
        if (numberOfPlayers > 0) {
            for (int n = 0; n < numberOfDice; n++) {
                int number = RandomNumber.getRandomNumber();
                player1Score += number;

                switch (number) {
                    case 1:
                        player1[n].setIcon(new ImageIcon("./ColorDice/blue1.png"));
                        break;
                    case 2:
                        player1[n].setIcon(new ImageIcon("./ColorDice/blue2.png"));
                        break;
                    case 3:
                        player1[n].setIcon(new ImageIcon("./ColorDice/blue3.png"));
                        break;
                    case 4:
                        player1[n].setIcon(new ImageIcon("./ColorDice/blue4.png"));
                        break;
                    case 5:
                        player1[n].setIcon(new ImageIcon("./ColorDice/blue5.png"));
                        break;
                    case 6:
                        player1[n].setIcon(new ImageIcon("./ColorDice/blue6.png"));
                        break;
                    default:
                        break;

                }
                //Plaverar tärningar på spelplanen
                player1Label.add(player1[n]);

                //Uppdatera spelplanen
                player1Label.revalidate();
                player1Label.repaint();

            }
            //Stoppa playerscore i en lista
            if (player1Score < 10) { //Om slaget är under 10 får den prefix 0 för att enklare sorteras senare.
                playerHighscore.add("0" + player1Score + " Spelare 1");
            } else {
                playerHighscore.add(player1Score + " Spelare 1");
            }
        }

        //Hämtar ett slumptal 1-6 och placerar sedan ut respektive tärningsbild
        //i form av en icon i spelare 2 layout.
        if (numberOfPlayers > 1) {
            for (int n = 0; n < numberOfDice; n++) {
                int number = RandomNumber.getRandomNumber();
                player2Score += number;

                switch (number) {
                    case 1:
                        player2[n].setIcon(new ImageIcon("./ColorDice/red1.png"));
                        break;
                    case 2:
                        player2[n].setIcon(new ImageIcon("./ColorDice/red2.png"));
                        break;
                    case 3:
                        player2[n].setIcon(new ImageIcon("./ColorDice/red3.png"));
                        break;
                    case 4:
                        player2[n].setIcon(new ImageIcon("./ColorDice/red4.png"));
                        break;
                    case 5:
                        player2[n].setIcon(new ImageIcon("./ColorDice/red5.png"));
                        break;
                    case 6:
                        player2[n].setIcon(new ImageIcon("./ColorDice/red6.png"));
                        break;
                    default:
                        break;
                }
                //Placerar tärningar på spelplanen
                player2Label.add(player2[n]);
                //Uppdatera spelplanen
                player2Label.revalidate();
                player2Label.repaint();

            }
            //Stoppa playerscore i en lista
            if (player2Score < 10) {
                playerHighscore.add("0" + player2Score + " Spelare 2");
            } else {
                playerHighscore.add(player2Score + " Spelare 2");
            }
        }

        //Hämtar ett slumptal 1-6 och placerar sedan ut respektive tärningsbild
        //i form av en icon i spelare 3 layout.
        if (numberOfPlayers > 2) {
            for (int n = 0; n < numberOfDice; n++) {
                int number = RandomNumber.getRandomNumber();
                player3Score += number;

                switch (number) {
                    case 1:
                        player3[n].setIcon(new ImageIcon("./ColorDice/orange1.png"));
                        break;
                    case 2:
                        player3[n].setIcon(new ImageIcon("./ColorDice/orange2.png"));
                        break;
                    case 3:
                        player3[n].setIcon(new ImageIcon("./ColorDice/orange3.png"));
                        break;
                    case 4:
                        player3[n].setIcon(new ImageIcon("./ColorDice/orange4.png"));
                        break;
                    case 5:
                        player3[n].setIcon(new ImageIcon("./ColorDice/orange5.png"));
                        break;
                    case 6:
                        player3[n].setIcon(new ImageIcon("./ColorDice/orange6.png"));
                        break;
                    default:
                        break;
                }
                //Placerar tärningar på spelplanen
                player3Label.add(player3[n]);
                //Uppdatera spelplanen
                player3Label.revalidate();
                player3Label.repaint();

            }
            //Stoppa playerscore i en lista
            if (player3Score < 10) {    //Om slaget är under 10 får den prefix 0 för att enklare sorteras senare.
                playerHighscore.add("0" + player3Score + " Spelare 3");
            } else {
                playerHighscore.add(player3Score + " Spelare 3");
            }
        }

        //Hämtar ett slumptal 1-6 och placerar sedan ut respektive tärningsbild
        //i form av en icon i spelare 4 layout.
        if (numberOfPlayers > 3) {
            for (int n = 0; n < numberOfDice; n++) {
                int number = RandomNumber.getRandomNumber();
                player4Score += number;

                switch (number) {
                    case 1:
                        player4[n].setIcon(new ImageIcon("./ColorDice/green1.png"));
                        break;
                    case 2:
                        player4[n].setIcon(new ImageIcon("./ColorDice/green2.png"));
                        break;
                    case 3:
                        player4[n].setIcon(new ImageIcon("./ColorDice/green3.png"));
                        break;
                    case 4:
                        player4[n].setIcon(new ImageIcon("./ColorDice/green4.png"));
                        break;
                    case 5:
                        player4[n].setIcon(new ImageIcon("./ColorDice/green5.png"));
                        break;
                    case 6:
                        player4[n].setIcon(new ImageIcon("./ColorDice/green6.png"));
                        break;
                    default:
                        break;
                }
                //Placerar tärningar på spelplanen
                player4Label.add(player4[n]);
                //Uppdatera spelplanen
                player4Label.revalidate();
                player4Label.repaint();

            }
            //Stoppa playerscore i en lista
            if (player4Score < 10) {
                playerHighscore.add("0" + player4Score + " Spelare 4");
            } else {
                playerHighscore.add(player4Score + " Spelare 4");
            }
        }

        //Hämtar ett slumptal 1-6 och placerar sedan ut respektive tärningsbild
        //i form av en icon i spelare 5 layout.
        if (numberOfPlayers > 4) {
            for (int n = 0; n < numberOfDice; n++) {
                int number = RandomNumber.getRandomNumber();
                player5Score += number;

                switch (number) {
                    case 1:
                        player5[n].setIcon(new ImageIcon("./ColorDice/purple1.png"));
                        break;
                    case 2:
                        player5[n].setIcon(new ImageIcon("./ColorDice/purple2.png"));
                        break;
                    case 3:
                        player5[n].setIcon(new ImageIcon("./ColorDice/purple3.png"));
                        break;
                    case 4:
                        player5[n].setIcon(new ImageIcon("./ColorDice/purple4.png"));
                        break;
                    case 5:
                        player5[n].setIcon(new ImageIcon("./ColorDice/purple5.png"));
                        break;
                    case 6:
                        player5[n].setIcon(new ImageIcon("./ColorDice/purple6.png"));
                        break;
                    default:
                        break;
                }
                //Placerar tärningar på spelplanen
                player5Label.add(player5[n]);
                //Uppdatera spelplanen
                player5Label.revalidate();
                player5Label.repaint();

            }
            //Stoppa playerscore i en lista
            if (player5Score < 10) {    //Om slaget är under 10 får den prefix 0 för att enklare sorteras senare.
                playerHighscore.add("0" + player5Score + " Spelare 5");
            } else {
                playerHighscore.add(player5Score + " Spelare 5");
            }
        }

        //Hämtar ett slumptal 1-6 och placerar sedan ut respektive tärningsbild
        //i form av en icon i spelare 5 layout.
        if (numberOfPlayers > 5) {
            for (int n = 0; n < numberOfDice; n++) {
                int number = RandomNumber.getRandomNumber();
                player6Score += number;

                switch (number) {
                    case 1:
                        player6[n].setIcon(new ImageIcon("./ColorDice/yellow1.png"));
                        break;
                    case 2:
                        player6[n].setIcon(new ImageIcon("./ColorDice/yellow2.png"));
                        break;
                    case 3:
                        player6[n].setIcon(new ImageIcon("./ColorDice/yellow3.png"));
                        break;
                    case 4:
                        player6[n].setIcon(new ImageIcon("./ColorDice/yellow4.png"));
                        break;
                    case 5:
                        player6[n].setIcon(new ImageIcon("./ColorDice/yellow5.png"));
                        break;
                    case 6:
                        player6[n].setIcon(new ImageIcon("./ColorDice/yellow6.png"));
                        break;
                    default:
                        break;
                }
                //Placerar tärningar på spelplanen
                player6Label.add(player6[n]);
                //Uppdatera spelplanen
                player6Label.revalidate();
                player6Label.repaint();

            }
            //Stoppa playerscore i en lista
            if (player6Score < 10) {    //Om slaget är under 10 får den prefix 0 för att enklare sorteras senare.
                playerHighscore.add("0" + player6Score + " Spelare 6");
            } else {
                playerHighscore.add(player6Score + " Spelare 6");
            }
        }

        //Skriver ut spelarnas poäng om han varit med och spelat.
        if (player1Score > 0) {
            player1resoult.setText(player1Score + "");
        }
        if (player2Score > 0) {
            player2resoult.setText(player2Score + "");
        }
        if (player3Score > 0) {
            player3resoult.setText(player3Score + "");
        }
        if (player4Score > 0) {
            player4resoult.setText(player4Score + "");
        }
        if (player5Score > 0) {
            player5resoult.setText(player5Score + "");
        }
        if (player6Score > 0) {
            player6resoult.setText(player6Score + "");
        }

        //Sorterar vinnarna och formaterar sedan en sträng och skriver ut vem som vunnit
        Collections.sort(playerHighscore, Collections.reverseOrder());
        String winner = playerHighscore.get(0).toString();
        String winnerName = winner.substring(winner.length() - 9, winner.length());
        String winningRoll = winner.substring(0, 2);
        winnerOutput = winnerName + " Vinner!";
        

        //Skriver ut vinnaren på label.
        winnerLabel.setText(winnerOutput);

        //Trimma ner winning roll så att den passar bra som en int.
        //Tilldelar sedan winningNumber des värde.
        if (winningRoll.charAt(1) == ' ') {
            winningNumber = Integer.parseInt(winningRoll.substring(0, 1));
        } else {
            winningNumber = Integer.parseInt(winningRoll);
        }

        //Skickar vinnarens tärningsslag för att kolla om han platsar i highscoren
        try {
            highScore.inData(winningNumber);
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        highscoreOutput.setText("");

        //Hämtar highscorelistan och skriver ut den på label
        try {
            ut = highScore.outData();
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        highscoreOutput.setText(ut);

        //Tömmer gammal score.
        player1Score = 0;
        player2Score = 0;
        player3Score = 0;
        player4Score = 0;
        player5Score = 0;
        player6Score = 0;
        playerHighscore.clear();
    }//GEN-LAST:event_diceRollBtnActionPerformed

    private void playerNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playerNumberActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new main().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel animatedDice;
    private javax.swing.JComboBox<String> diceNumber;
    private javax.swing.JButton diceRollBtn;
    private javax.swing.JTextArea highscoreOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel player1Label;
    private javax.swing.JLabel player1resoult;
    private javax.swing.JLabel player2Label;
    private javax.swing.JLabel player2resoult;
    private javax.swing.JLabel player3Label;
    private javax.swing.JLabel player3resoult;
    private javax.swing.JLabel player4Label;
    private javax.swing.JLabel player4resoult;
    private javax.swing.JLabel player5Label;
    private javax.swing.JLabel player5resoult;
    private javax.swing.JLabel player6Label;
    private javax.swing.JLabel player6resoult;
    private javax.swing.JComboBox<String> playerNumber;
    private javax.swing.JButton resetBtn;
    private javax.swing.JLabel winnerLabel;
    // End of variables declaration//GEN-END:variables
}
